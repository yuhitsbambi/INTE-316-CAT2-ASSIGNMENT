b(iv)Linear regression
chat numpy
from sklearn.linear_model import LinearRegression

# Sample data points
x_data = np.array([0, 1, 2, 3, 4, 5]).reshape(-1, 1)
y_data = np.array([0, 2, 4, 6, 8, 10])

# Perform linear regression
model = LinearRegression().fit(x_data, y_data)
slope = model.coef_[0]
intercept = model.intercept_

# Predict and plot the data
y_pred = model.predict(x_data)
plt.scatter(x_data, y_data, label='Data')
plt.plot(x_data, y_pred, label='Linear Fit', color='red')
plt.legend()
plt.show()

slope, intercept


copilot scipy
from scipy.stats import linregress

x_data = np.array([1, 2, 3, 4])
y_data = np.array([5, 8, 12, 17])

slope, intercept, _, _, _ = linregress(x_data, y_data)
print("Linear regression slope:", slope)
print("Linear regression intercept:", intercept)

copilot numpy polyfit
import numpy as np
import matplotlib.pyplot as plt

# Given data
x = np.array([1, 2, 3, 4])
y = np.array([5, 9, 13, 16])

# Fit a linear regression line (degree 1)
coef = np.polyfit(x, y, 1)
poly1d_fn = np.poly1d(coef)

# Plot the data points and the regression line
plt.plot(x, y, 'yo', label='Data Points')
plt.plot(x, poly1d_fn(x), label='Linear Regression Line')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Linear Regression using numpy.polyfit')
plt.legend()
plt.grid(True)
plt.show()

